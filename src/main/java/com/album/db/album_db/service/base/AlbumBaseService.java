/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://beta.skaffolder.com/#!/register?friend=5cc4adb8fe21c354b568ed16
*
* You will get 10% discount for each one of your friends
* 
*/
package com.album.db.album_db.service.base;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Service;

import com.album.db.album_db.entity.Album;
import com.album.db.album_db.service.AlbumService;

//IMPORT RELATIONS
import com.album.db.album_db.entity.Album;
import com.album.db.album_db.entity.Photo;

@Service
public class AlbumBaseService {

	private static NamedParameterJdbcTemplate jdbcTemplate;
	
		@Autowired
	public void setDataSource(DataSource dataSource) {
		jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
	}
	


    //CRUD METHODS
    
    //CRUD - CREATE
    	
	public Album insert(Album obj) {
		Long id = jdbcTemplate.queryForObject("select max(_id) from `album`", new MapSqlParameterSource(), Long.class);
		obj.set_id(id == null ? 1 : id + 1);
		String sql = "INSERT INTO `album` (`_id`, `Description`,`Title`,`Photo`) VALUES (:id,:Description,:Title, :Photo )";
			SqlParameterSource parameters = new MapSqlParameterSource()
		    .addValue("id", obj.get_id())
			.addValue("Description", obj.getDescription())
			.addValue("Title", obj.getTitle())
			.addValue("Photo", obj.getPhoto());
		
		jdbcTemplate.update(sql, parameters);
		return obj;
	}
	
    	
    //CRUD - REMOVE
    
	public void delete(Long id) {
		String sql = "DELETE FROM `Album` WHERE `_id`=:id";
		SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id);
		
		jdbcTemplate.update(sql, parameters);
	}

    	
    //CRUD - FIND BY Photo
    	
	public List<Album> findByPhoto(Long idPhoto) {
		
		String sql = "select * from `Album` WHERE `Photo` = :idPhoto";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
		.addValue("idPhoto", idPhoto);
	    
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Album.class));
	}
    	
    //CRUD - GET ONE
    	
	public Album get(Long id) {
	    
		String sql = "select * from `Album` where `_id` = :id";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id);
	    
	    return (Album) jdbcTemplate.queryForObject(sql, parameters, new BeanPropertyRowMapper(Album.class));
	}


    	
        	
    //CRUD - GET LIST
    	
	public List<Album> getList() {
	    
		String sql = "select * from `Album`";
		
	    SqlParameterSource parameters = new MapSqlParameterSource();
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Album.class));
	    
	    
	}

    	
    //CRUD - EDIT
    	
	public Album update(Album obj, Long id) {

		String sql = "UPDATE `Album` SET `Description` = :Description,`Title` = :Title , `Photo` = :Photo  WHERE `_id`=:id";
		SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id)
			.addValue("Description", obj.getDescription())
			.addValue("Title", obj.getTitle())
			.addValue("Photo", obj.getPhoto());
		jdbcTemplate.update(sql, parameters);
	    return obj;
	}
	
    	
    
    
    
        
    

    
    /*
     * CUSTOM SERVICES
     * 
     *	These services will be overwritten and implemented in AlbumService.java
     */
    

}
